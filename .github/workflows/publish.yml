name: release-pr-publish

on:
  release:
    types: [created]

jobs:
  versioning:
    runs-on: ubuntu-latest
    outputs:
      has_changes: ${{ steps.version_and_changelog.outputs.has_changes }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - name: Install commitizen
        run: pip install --upgrade commitizen
      - name: Update version and changelog
        id: version_and_changelog
        run: |
          RELEASE_VERSION=${{ github.event.release.tag_name }}
          sed -i "s/^version = \".*\"/version = \"$RELEASE_VERSION\"/" pyproject.toml
          cz changelog --incremental
          if [[ -z $(git status --porcelain) ]]; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
      - name: Commit and push
        if: ${{ steps.version_and_changelog.outputs.has_changes == 'true' }}
        run: |
          RELEASE_VERSION=${{ github.event.release.tag_name }}
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions@github.com"
          git checkout -b "release-temp-$RELEASE_VERSION"
          git add pyproject.toml CHANGELOG.md
          git commit -m "chore(release): update version to $RELEASE_VERSION and CHANGELOG"
          git push origin "release-temp-$RELEASE_VERSION"
      - name: Create Pull Request
        if: ${{ steps.version_and_changelog.outputs.has_changes == 'true' }}
        id: create_pr
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: release-temp-${{ github.event.release.tag_name }}
          base: main
          title: "Release ${{ github.event.release.tag_name }}"
          body: "Updates pyproject.toml and CHANGELOG.md to version ${{ github.event.release.tag_name }}."
      - name: Merge Pull Request
        if: ${{ steps.version_and_changelog.outputs.has_changes == 'true' }}
        uses: peter-evans/merge-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          pull-request: ${{ steps.create_pr.outputs.pull-request-number }}
          merge-method: merge

  build:
    runs-on: ubuntu-latest
    needs: versioning
    if: needs.versioning.outputs.has_changes == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - name: Install build
        run: pip install --upgrade build
      - name: Build package
        run: python -m build
      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: package-dist
          path: dist/*

  publish:
    runs-on: ubuntu-latest
    needs: build
    if: needs.versioning.outputs.has_changes == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Download Artifact
        uses: actions/download-artifact@v3
        with:
          name: package-dist
          path: dist
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - name: Install twine
        run: pip install --upgrade twine
      - name: Publish
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: twine upload dist/*
